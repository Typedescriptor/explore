#!/usr/bin/env python3

# -*- mode: python -*-

"""Enrichment tool

Usage:
  enrich [options] <file>...

  -i                    Update files in place instead of printing output
  --help                Show this screen
  --version             Show version

"""
from docopt import docopt

import requests
from sys import stderr
from os import path, environ, devnull
import sys
import yaml
from bs4 import BeautifulSoup
from copy import deepcopy
import urllib.parse


# Allow importing modules from the project directory
sys.path.append(path.abspath(path.dirname(__file__) + "/.."))

debug = lambda text: None
global_session = requests.Session()


def run(args):
    change_count = 0
    files = args["<file>"]
    for file in files:
        changed = _enrich(file, args["-i"])
        if changed:
            change_count += 1
            sys.stderr.write(f"enriched {file}\n")
    sys.stderr.write("All done! ✨ 🍰 ✨\n")  # ...yup, black

    file_count = _files(len(files))
    if change_count == 0:
        sys.stderr.write(f"{file_count} left unchanged.\n")
    else:
        sys.stderr.write(f"Changed {_files(change_count)}\n")


def _files(count: int) -> str:
    if count == 1:
        return "1 file"
    return f"{count} files"


def _enrich(file: str, in_place: bool):
    with open(file, "r") as f:
        y = yaml.load(f, Loader=yaml.FullLoader)

    changed = False
    for item in y:
        if "service" in item:
            changed = changed | _core_enrich_service(item)

    output = sys.stdout
    if in_place:
        if not changed:
            output = open(devnull, "w")
        else:
            output = open(file, "w")
    yaml.dump(y, output, sort_keys=False)
    return changed


def _core_enrich_service(service) -> bool:
    original_service = deepcopy(service)
    for k, v in enrichments.items():
        enricher = enrichments[k]
        old_value = service.get(k)
        new_value = enricher(service, old_value) or old_value
        service[k] = new_value
    return original_service != service


def _get_page(url: str) -> BeautifulSoup:
    if url is None:
        return BeautifulSoup()

    debug(f"Download page '{url}'")
    page = global_session.get(url).text
    return BeautifulSoup(page, features="html.parser")


def _enrich_description(service, value):
    if value is not None:
        return _normalize_ws(value)
    page = _get_page(service["homepage_url"])

    result = (
        page.find("meta", attrs={"name": "og:description"})
        or page.find("meta", attrs={"property": "og:description"})
        or page.find("meta", attrs={"name": "description"})
        or {}
    )
    return _normalize_ws(result.get("content"))


def _enrich_links(service, value):
    if "links" not in service:
        return None
    try:
        iterator = iter(value)
    except TypeError:
        return None

    for index, link in enumerate(value):
        if isinstance(link, str):
            page = _get_page(link)
            service["links"][index] = {"url": link, "title": _page_title(page)}
        elif link.get("title") is None:
            page = _get_page(link.get("url"))
            value[index]["title"] = _page_title(page)
        else:
            value[index]["title"] = _normalize_ws(link.get("title"))
            value[index]["url"] = _normalize_ws(link.get("url"))
    return value


def _enrich_logo_url(service, value):
    if service.get("logo_url") is not None:
        return None

    homepage_url = service["homepage_url"]
    if homepage_url is None:
        return None
    page = _get_page(homepage_url)
    result = (
        page.find("meta", attrs={"name": "og:image"})
        or page.find("meta", attrs={"property": "og:image"})
        or page.find("link", attrs={"rel": "apple-touch-icon"})
        or page.find("link", attrs={"rel": "fluid-icon"})
        or page.find("link", attrs={"rel": "icon"})
        or {}
    )

    # Could be a relative URL
    return urllib.parse.urljoin(
        homepage_url, result.get("content") or result.get("href")
    )


def _enrichment_name(symbol):
    return symbol[len("_enrich_") :]


def _debug(text):
    sys.stderr.write(text)
    sys.stderr.write("\n")


def _page_title(s: BeautifulSoup) -> str:
    result = s.find("title")
    if result is not None:
        return result.text
    return None


def _normalize_ws(s: str) -> str:
    if s is None:
        return None
    return " ".join(s.split()).strip()


if environ.get("DEBUG", "0") != "0":
    debug = _debug


def _represent_none(self, _):
    return self.represent_scalar("tag:yaml.org,2002:null", "~")


yaml.add_representer(type(None), _represent_none)

enrichments = {
    _enrichment_name(k): v
    for k, v in locals().items()
    if callable(v) and k.startswith("_enrich_")
}


if __name__ == "__main__":
    arguments = docopt(__doc__, version="enrich/1.0")
    exit(run(arguments))
